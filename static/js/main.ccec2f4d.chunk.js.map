{"version":3,"sources":["happyRick.png","madRick.png","QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","QuoteMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","numQuotes","quote","author","pullQuote","bind","assertThisInitialized","shareQuote","endPoint","concat","_this2","fetch","then","rickData","json","data","setState","console","error","window","open","react_default","a","createElement","id","src","require","alt","index_es","className","CardActions_default","Button_default","variant","color","onClick","CardContent_default","Typography_default","component","Component","App","src_QuoteMachine","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gQCuEzBC,cA9Db,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,EACXC,MAAO,IAETT,EAAKU,OAAS,kBACdV,EAAKW,UAAYX,EAAKW,UAAUC,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACjBA,EAAKc,WAAad,EAAKc,WAAWF,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAClBA,EAAKe,SAAL,2CAAAC,OAA2DhB,EAAKO,MAAMC,UAAtE,WAA0F,GAT1ER,2EAaL,IAAAiB,EAAAd,KACXe,MAAMf,KAAKY,UACRI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACAA,EAASE,KACXL,EAAKM,SAAS,CACZd,MAAOW,EAASE,OAGlBE,QAAQC,MAAM,+EAMpBC,OAAOC,KAAP,yCAAAX,OAAqDb,KAAKI,MAAME,MAAhE,sDAIA,OACEmB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OAAOC,IAAKC,EAAQ,KAAoBC,IAAI,eACpDN,EAAAC,EAAAC,cAAA,MAAIC,GAAG,UAAP,yBACAH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,UAAU,QACdR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAaO,UAAU,UACrBR,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQE,GAAG,YAAYQ,QAAQ,WAAWC,MAAM,UAAUC,QAAStC,KAAKQ,WAAxE,mCAGJiB,EAAAC,EAAAC,cAAA,WACC3B,KAAKI,MAAME,OAASmB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMJ,GAAG,YAAYK,UAAU,QAClDR,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAaE,GAAG,WACdH,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAYE,GAAG,OAAOa,UAAU,KAC7BzC,KAAKI,MAAME,OAEdmB,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAYE,GAAG,SAASa,UAAU,KAC/BzC,KAAKO,SAGVkB,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAaO,UAAU,UACrBR,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQE,GAAG,cAAcQ,QAAQ,WAAWC,MAAM,UAAUC,QAAStC,KAAKW,YAA1E,sBAGJc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,IAAKC,EAAQ,KAAkBC,IAAI,qBA1DhCW,aCOZC,mLARX,OACElB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACiB,EAAD,cAJUF,aCQEG,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.ccec2f4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/happyRick.47611180.png\";","module.exports = __webpack_public_path__ + \"static/media/madRick.81ba3bc2.png\";","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Card } from '@material-ui/core';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nclass QuoteMachine extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      numQuotes: 1,\n      quote: '',\n    };\n    this.author = '-- Rick Sanchez';\n    this.pullQuote = this.pullQuote.bind(this);\n    this.shareQuote = this.shareQuote.bind(this);\n    this.endPoint = `http://loremricksum.com/api/?paragraphs=${this.state.numQuotes}&quotes=${2}`\n    \n  }\n\n  pullQuote () {\n    fetch(this.endPoint)\n      .then(rickData => rickData.json())\n      .then(rickData => {\n        if (rickData.data){\n          this.setState({\n            quote: rickData.data\n          })\n        } else {\n          console.error('Hurry Morty, get the debugger Morty!')\n        }\n      })\n  }\n\n  shareQuote () {\n    window.open(`https://twitter.com/intent/tweet?text=${this.state.quote} -- Rick Sanchez`)\n  }\n\n  render(){\n    return (\n      <div>\n        <img id='rick' src={require(\"./happyRick.png\")} alt=\"Happy Rick\"></img>\n        <h1 id=\"header\">Quote Machineeeeeeee!</h1>\n        <Card className=\"card\" >\n          <CardActions className=\"button\">\n            <Button id='new-quote' variant=\"outlined\" color=\"primary\" onClick={this.pullQuote}>Click Here to Wubalubadubdub!</Button>\n          </CardActions>\n        </Card>\n        <br/>\n        {this.state.quote && <Card id='Quote-Box' className=\"card\">\n          <CardContent id=\"content\">\n            <Typography id='text' component='p'>\n              {this.state.quote}\n            </Typography>\n            <Typography id='author' component='p'>\n              {this.author}\n            </Typography>\n          </CardContent>\n          <CardActions className=\"button\">\n            <Button id='tweet-quote' variant=\"outlined\" color=\"primary\" onClick={this.shareQuote}>Tell Yo Friends!</Button>\n          </CardActions >\n        </Card>}\n        <br/>\n        <img id='rick2' src={require(\"./madRick.png\")} alt=\"Mad Rick\"/>\n      </div>\n    )\n  }\n}\n\nexport default QuoteMachine;","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteMachine from './QuoteMachine';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteMachine/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}